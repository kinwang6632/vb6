unit CsHorse2Library_Intf;

{----------------------------------------------------------------------------}
{ This unit was automatically generated by the RemObjects SDK after reading  }
{ the RODL file associated with this project .                               }
{                                                                            }
{ Do not modify this unit manually, or your changes will be lost when this   }
{ unit is regenerated the next time you compile the project.                 }
{----------------------------------------------------------------------------}

{$I Remobjects.inc}

interface

uses
  {vcl:} Classes, TypInfo,
  {RemObjects:} uROXMLIntf, uROClasses, uROClient, uROTypes, uROClientIntf;

const
  { Library ID }
  LibraryUID = '{2AD54CDB-1DA6-4043-8B23-FFBFDAC74174}';
  TargetNamespace = '';

  { Service Interface ID's }
  ILoginService_IID : TGUID = '{D4BF3D0A-AE86-4A14-A9F9-BC7592BEA6DD}';
  IAnnService_IID : TGUID = '{B1A16ABD-12C1-47A8-9E47-1D107EEBC2DB}';
  ICallbackService_IID : TGUID = '{9EDDBC83-9C22-4EBC-B2EA-CA71DAC6A1AC}';

  { Event ID's }
  EID_SrvCallbackEvent = 'SrvCallbackEvent';

type
  { Forward declarations }
  ILoginService = interface;
  IAnnService = interface;
  ICallbackService = interface;

  TLoginInfo = class;
  TMsgInfo = class;

  ISrvCallbackEvent = interface;


  { TLoginInfo }
  TLoginInfo = class(TROComplexType)
  private
    fSessionId: String;
    fCompCode: String;
    fCompName: String;
    fUserId: String;
    fUserName: String;
    fPassword: String;
    fWorkClass: String;
    fGroupName: String;
    fHostName: String;
    fIP: String;
    fTermSId: String;
    fTermSIP: String;
    fTermSName: String;
    fTermSPC: String;
    fTermState: String;
    fCompStr: String;
    fStatus: String;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property SessionId:String read fSessionId write fSessionId;
    property CompCode:String read fCompCode write fCompCode;
    property CompName:String read fCompName write fCompName;
    property UserId:String read fUserId write fUserId;
    property UserName:String read fUserName write fUserName;
    property Password:String read fPassword write fPassword;
    property WorkClass:String read fWorkClass write fWorkClass;
    property GroupName:String read fGroupName write fGroupName;
    property HostName:String read fHostName write fHostName;
    property IP:String read fIP write fIP;
    property TermSId:String read fTermSId write fTermSId;
    property TermSIP:String read fTermSIP write fTermSIP;
    property TermSName:String read fTermSName write fTermSName;
    property TermSPC:String read fTermSPC write fTermSPC;
    property TermState:String read fTermState write fTermState;
    property CompStr:String read fCompStr write fCompStr;
    property Status:String read fStatus write fStatus;
  end;

  { TLoginInfoCollection }
  TLoginInfoCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TLoginInfo;
    procedure SetItems(aIndex: integer; const Value: TLoginInfo);
  public
    constructor Create; overload;
    function Add: TLoginInfo; reintroduce;
    property Items[Index: integer]:TLoginInfo read GetItems write SetItems; default;
  end;

  { TMsgInfo }
  TMsgInfo = class(TROComplexType)
  private
    fCompCode: String;
    fCompName: String;
    fMsgPriority: String;
    fMsgId: String;
    fMsgSubject: String;
    fMsgTime: String;
    fMsgReply: String;
    fMsgSenderId: String;
    fMsgSenderName: String;
    fMsgSenderWorkClass: String;
    fMsgSenderWorkName: String;
    fIsRead: Boolean;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property CompCode:String read fCompCode write fCompCode;
    property CompName:String read fCompName write fCompName;
    property MsgPriority:String read fMsgPriority write fMsgPriority;
    property MsgId:String read fMsgId write fMsgId;
    property MsgSubject:String read fMsgSubject write fMsgSubject;
    property MsgTime:String read fMsgTime write fMsgTime;
    property MsgReply:String read fMsgReply write fMsgReply;
    property MsgSenderId:String read fMsgSenderId write fMsgSenderId;
    property MsgSenderName:String read fMsgSenderName write fMsgSenderName;
    property MsgSenderWorkClass:String read fMsgSenderWorkClass write fMsgSenderWorkClass;
    property MsgSenderWorkName:String read fMsgSenderWorkName write fMsgSenderWorkName;
    property IsRead:Boolean read fIsRead write fIsRead;
  end;

  { TMsgInfoCollection }
  TMsgInfoCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TMsgInfo;
    procedure SetItems(aIndex: integer; const Value: TMsgInfo);
  public
    constructor Create; overload;
    function Add: TMsgInfo; reintroduce;
    property Items[Index: integer]:TMsgInfo read GetItems write SetItems; default;
  end;

  { ILoginService }
  ILoginService = interface
    ['{D4BF3D0A-AE86-4A14-A9F9-BC7592BEA6DD}']
    function Login(var AInfo: TLoginInfo; var AErrMsg: String): Boolean;
    procedure Logout(const AInfo: TLoginInfo);
    function GetClientParam: Binary;
    function GetOraSysDate(const ACompCode: String): String;
  end;

  { CoLoginService }
  CoLoginService = class
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): ILoginService;
  end;

  { TLoginService_Proxy }
  TLoginService_Proxy = class(TROProxy, ILoginService)
  protected
    function __GetInterfaceName:string; override;

    function Login(var AInfo: TLoginInfo; var AErrMsg: String): Boolean;
    procedure Logout(const AInfo: TLoginInfo);
    function GetClientParam: Binary;
    function GetOraSysDate(const ACompCode: String): String;
  end;

  { IAnnService }
  IAnnService = interface
    ['{B1A16ABD-12C1-47A8-9E47-1D107EEBC2DB}']
    function GetSO021(const AInfo: TLoginInfo): Binary;
    function GetSOListText(var AInfo: TLoginInfo): String;
    function GetCD042(const AInfo: TLoginInfo): Binary;
    function GetSO022(const AInfo: TLoginInfo): Binary;
    function GetSO023(const AInfo: TLoginInfo): Binary;
  end;

  { CoAnnService }
  CoAnnService = class
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IAnnService;
  end;

  { TAnnService_Proxy }
  TAnnService_Proxy = class(TROProxy, IAnnService)
  protected
    function __GetInterfaceName:string; override;

    function GetSO021(const AInfo: TLoginInfo): Binary;
    function GetSOListText(var AInfo: TLoginInfo): String;
    function GetCD042(const AInfo: TLoginInfo): Binary;
    function GetSO022(const AInfo: TLoginInfo): Binary;
    function GetSO023(const AInfo: TLoginInfo): Binary;
  end;

  { ICallbackService }
  ICallbackService = interface
    ['{9EDDBC83-9C22-4EBC-B2EA-CA71DAC6A1AC}']
    function GetGroupList(const AInfo: TLoginInfo): Binary;
    function GetUserList(const AInfo: TLoginInfo): Binary;
    function SendMsg(const AInfo: TLoginInfo; const ARecver: Binary; const AMsg: Binary; const AMsgInfo: TMsgInfo; var AErrMsg: String): Boolean;
    function GetMsgList(const AInfo: TLoginInfo): Binary;
    function GetMsg(const AInfo: TLoginInfo; const AMsgInfo: TMsgInfo): Binary;
    function GetOraSysDate(const ACompCode: String): String;
    procedure SetMsgRead(const AInfo: TLoginInfo; const AMsgInfo: TMsgInfo);
  end;

  { CoCallbackService }
  CoCallbackService = class
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): ICallbackService;
  end;

  { TCallbackService_Proxy }
  TCallbackService_Proxy = class(TROProxy, ICallbackService)
  protected
    function __GetInterfaceName:string; override;

    function GetGroupList(const AInfo: TLoginInfo): Binary;
    function GetUserList(const AInfo: TLoginInfo): Binary;
    function SendMsg(const AInfo: TLoginInfo; const ARecver: Binary; const AMsg: Binary; const AMsgInfo: TMsgInfo; var AErrMsg: String): Boolean;
    function GetMsgList(const AInfo: TLoginInfo): Binary;
    function GetMsg(const AInfo: TLoginInfo; const AMsgInfo: TMsgInfo): Binary;
    function GetOraSysDate(const ACompCode: String): String;
    procedure SetMsgRead(const AInfo: TLoginInfo; const AMsgInfo: TMsgInfo);
  end;

  { ISrvCallbackEvent }
  ISrvCallbackEvent = interface
    ['{50D06F25-6FBE-4924-9ABA-205DE720DD83}']
    procedure UsersChange(const AInfo: TLoginInfo);
    procedure ShutdownServer(const AMessage: String);
    procedure MsgChange(const AMsgInfo: TMsgInfo);
  end;

  { ISrvCallbackEvent_Writer }
  ISrvCallbackEvent_Writer = interface(IROEventWriter)
    ['{50D06F25-6FBE-4924-9ABA-205DE720DD83}']
    procedure UsersChange(const __Sender : TGUID; const AInfo: TLoginInfo);
    procedure ShutdownServer(const __Sender : TGUID; const AMessage: String);
    procedure MsgChange(const __Sender : TGUID; const AMsgInfo: TMsgInfo);
  end;

implementation

uses
  {vcl:} SysUtils,
  {RemObjects:} uROEventRepository, uROSerializer, uRORes;

{ TLoginInfo }

procedure TLoginInfo.Assign(iSource: TPersistent); 
var lSource: CsHorse2Library_Intf.TLoginInfo;
begin
  inherited Assign(iSource);
  if (iSource is CsHorse2Library_Intf.TLoginInfo) then begin
    lSource := CsHorse2Library_Intf.TLoginInfo(iSource);
    SessionId := lSource.SessionId;
    CompCode := lSource.CompCode;
    CompName := lSource.CompName;
    UserId := lSource.UserId;
    UserName := lSource.UserName;
    Password := lSource.Password;
    WorkClass := lSource.WorkClass;
    GroupName := lSource.GroupName;
    HostName := lSource.HostName;
    IP := lSource.IP;
    TermSId := lSource.TermSId;
    TermSIP := lSource.TermSIP;
    TermSName := lSource.TermSName;
    TermSPC := lSource.TermSPC;
    TermState := lSource.TermState;
    CompStr := lSource.CompStr;
    Status := lSource.Status;
  end;
end;

procedure TLoginInfo.ReadComplex(ASerializer: TObject);
var
  l_CompCode: String;
  l_CompName: String;
  l_CompStr: String;
  l_GroupName: String;
  l_HostName: String;
  l_IP: String;
  l_Password: String;
  l_SessionId: String;
  l_Status: String;
  l_TermSId: String;
  l_TermSIP: String;
  l_TermSName: String;
  l_TermSPC: String;
  l_TermState: String;
  l_UserId: String;
  l_UserName: String;
  l_WorkClass: String;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_SessionId := SessionId;
    TROSerializer(ASerializer).ReadUTF8String('SessionId', l_SessionId);
    SessionId := l_SessionId;
    l_CompCode := CompCode;
    TROSerializer(ASerializer).ReadUTF8String('CompCode', l_CompCode);
    CompCode := l_CompCode;
    l_CompName := CompName;
    TROSerializer(ASerializer).ReadUTF8String('CompName', l_CompName);
    CompName := l_CompName;
    l_UserId := UserId;
    TROSerializer(ASerializer).ReadUTF8String('UserId', l_UserId);
    UserId := l_UserId;
    l_UserName := UserName;
    TROSerializer(ASerializer).ReadUTF8String('UserName', l_UserName);
    UserName := l_UserName;
    l_Password := Password;
    TROSerializer(ASerializer).ReadUTF8String('Password', l_Password);
    Password := l_Password;
    l_WorkClass := WorkClass;
    TROSerializer(ASerializer).ReadUTF8String('WorkClass', l_WorkClass);
    WorkClass := l_WorkClass;
    l_GroupName := GroupName;
    TROSerializer(ASerializer).ReadUTF8String('GroupName', l_GroupName);
    GroupName := l_GroupName;
    l_HostName := HostName;
    TROSerializer(ASerializer).ReadUTF8String('HostName', l_HostName);
    HostName := l_HostName;
    l_IP := IP;
    TROSerializer(ASerializer).ReadUTF8String('IP', l_IP);
    IP := l_IP;
    l_TermSId := TermSId;
    TROSerializer(ASerializer).ReadUTF8String('TermSId', l_TermSId);
    TermSId := l_TermSId;
    l_TermSIP := TermSIP;
    TROSerializer(ASerializer).ReadUTF8String('TermSIP', l_TermSIP);
    TermSIP := l_TermSIP;
    l_TermSName := TermSName;
    TROSerializer(ASerializer).ReadUTF8String('TermSName', l_TermSName);
    TermSName := l_TermSName;
    l_TermSPC := TermSPC;
    TROSerializer(ASerializer).ReadUTF8String('TermSPC', l_TermSPC);
    TermSPC := l_TermSPC;
    l_TermState := TermState;
    TROSerializer(ASerializer).ReadUTF8String('TermState', l_TermState);
    TermState := l_TermState;
    l_CompStr := CompStr;
    TROSerializer(ASerializer).ReadUTF8String('CompStr', l_CompStr);
    CompStr := l_CompStr;
    l_Status := Status;
    TROSerializer(ASerializer).ReadUTF8String('Status', l_Status);
    Status := l_Status;
  end
  else begin
    l_CompCode := CompCode;
    TROSerializer(ASerializer).ReadUTF8String('CompCode', l_CompCode);
    CompCode := l_CompCode;
    l_CompName := CompName;
    TROSerializer(ASerializer).ReadUTF8String('CompName', l_CompName);
    CompName := l_CompName;
    l_CompStr := CompStr;
    TROSerializer(ASerializer).ReadUTF8String('CompStr', l_CompStr);
    CompStr := l_CompStr;
    l_GroupName := GroupName;
    TROSerializer(ASerializer).ReadUTF8String('GroupName', l_GroupName);
    GroupName := l_GroupName;
    l_HostName := HostName;
    TROSerializer(ASerializer).ReadUTF8String('HostName', l_HostName);
    HostName := l_HostName;
    l_IP := IP;
    TROSerializer(ASerializer).ReadUTF8String('IP', l_IP);
    IP := l_IP;
    l_Password := Password;
    TROSerializer(ASerializer).ReadUTF8String('Password', l_Password);
    Password := l_Password;
    l_SessionId := SessionId;
    TROSerializer(ASerializer).ReadUTF8String('SessionId', l_SessionId);
    SessionId := l_SessionId;
    l_Status := Status;
    TROSerializer(ASerializer).ReadUTF8String('Status', l_Status);
    Status := l_Status;
    l_TermSId := TermSId;
    TROSerializer(ASerializer).ReadUTF8String('TermSId', l_TermSId);
    TermSId := l_TermSId;
    l_TermSIP := TermSIP;
    TROSerializer(ASerializer).ReadUTF8String('TermSIP', l_TermSIP);
    TermSIP := l_TermSIP;
    l_TermSName := TermSName;
    TROSerializer(ASerializer).ReadUTF8String('TermSName', l_TermSName);
    TermSName := l_TermSName;
    l_TermSPC := TermSPC;
    TROSerializer(ASerializer).ReadUTF8String('TermSPC', l_TermSPC);
    TermSPC := l_TermSPC;
    l_TermState := TermState;
    TROSerializer(ASerializer).ReadUTF8String('TermState', l_TermState);
    TermState := l_TermState;
    l_UserId := UserId;
    TROSerializer(ASerializer).ReadUTF8String('UserId', l_UserId);
    UserId := l_UserId;
    l_UserName := UserName;
    TROSerializer(ASerializer).ReadUTF8String('UserName', l_UserName);
    UserName := l_UserName;
    l_WorkClass := WorkClass;
    TROSerializer(ASerializer).ReadUTF8String('WorkClass', l_WorkClass);
    WorkClass := l_WorkClass;
  end;
end;

procedure TLoginInfo.WriteComplex(ASerializer: TObject);
var
  l_CompCode: String;
  l_CompName: String;
  l_CompStr: String;
  l_GroupName: String;
  l_HostName: String;
  l_IP: String;
  l_Password: String;
  l_SessionId: String;
  l_Status: String;
  l_TermSId: String;
  l_TermSIP: String;
  l_TermSName: String;
  l_TermSPC: String;
  l_TermState: String;
  l_UserId: String;
  l_UserName: String;
  l_WorkClass: String;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TLoginInfo);
    l_SessionId := SessionId;
    TROSerializer(ASerializer).WriteUTF8String('SessionId', l_SessionId);
    l_CompCode := CompCode;
    TROSerializer(ASerializer).WriteUTF8String('CompCode', l_CompCode);
    l_CompName := CompName;
    TROSerializer(ASerializer).WriteUTF8String('CompName', l_CompName);
    l_UserId := UserId;
    TROSerializer(ASerializer).WriteUTF8String('UserId', l_UserId);
    l_UserName := UserName;
    TROSerializer(ASerializer).WriteUTF8String('UserName', l_UserName);
    l_Password := Password;
    TROSerializer(ASerializer).WriteUTF8String('Password', l_Password);
    l_WorkClass := WorkClass;
    TROSerializer(ASerializer).WriteUTF8String('WorkClass', l_WorkClass);
    l_GroupName := GroupName;
    TROSerializer(ASerializer).WriteUTF8String('GroupName', l_GroupName);
    l_HostName := HostName;
    TROSerializer(ASerializer).WriteUTF8String('HostName', l_HostName);
    l_IP := IP;
    TROSerializer(ASerializer).WriteUTF8String('IP', l_IP);
    l_TermSId := TermSId;
    TROSerializer(ASerializer).WriteUTF8String('TermSId', l_TermSId);
    l_TermSIP := TermSIP;
    TROSerializer(ASerializer).WriteUTF8String('TermSIP', l_TermSIP);
    l_TermSName := TermSName;
    TROSerializer(ASerializer).WriteUTF8String('TermSName', l_TermSName);
    l_TermSPC := TermSPC;
    TROSerializer(ASerializer).WriteUTF8String('TermSPC', l_TermSPC);
    l_TermState := TermState;
    TROSerializer(ASerializer).WriteUTF8String('TermState', l_TermState);
    l_CompStr := CompStr;
    TROSerializer(ASerializer).WriteUTF8String('CompStr', l_CompStr);
    l_Status := Status;
    TROSerializer(ASerializer).WriteUTF8String('Status', l_Status);
  end
  else begin
    l_CompCode := CompCode;
    TROSerializer(ASerializer).WriteUTF8String('CompCode', l_CompCode);
    l_CompName := CompName;
    TROSerializer(ASerializer).WriteUTF8String('CompName', l_CompName);
    l_CompStr := CompStr;
    TROSerializer(ASerializer).WriteUTF8String('CompStr', l_CompStr);
    l_GroupName := GroupName;
    TROSerializer(ASerializer).WriteUTF8String('GroupName', l_GroupName);
    l_HostName := HostName;
    TROSerializer(ASerializer).WriteUTF8String('HostName', l_HostName);
    l_IP := IP;
    TROSerializer(ASerializer).WriteUTF8String('IP', l_IP);
    l_Password := Password;
    TROSerializer(ASerializer).WriteUTF8String('Password', l_Password);
    l_SessionId := SessionId;
    TROSerializer(ASerializer).WriteUTF8String('SessionId', l_SessionId);
    l_Status := Status;
    TROSerializer(ASerializer).WriteUTF8String('Status', l_Status);
    l_TermSId := TermSId;
    TROSerializer(ASerializer).WriteUTF8String('TermSId', l_TermSId);
    l_TermSIP := TermSIP;
    TROSerializer(ASerializer).WriteUTF8String('TermSIP', l_TermSIP);
    l_TermSName := TermSName;
    TROSerializer(ASerializer).WriteUTF8String('TermSName', l_TermSName);
    l_TermSPC := TermSPC;
    TROSerializer(ASerializer).WriteUTF8String('TermSPC', l_TermSPC);
    l_TermState := TermState;
    TROSerializer(ASerializer).WriteUTF8String('TermState', l_TermState);
    l_UserId := UserId;
    TROSerializer(ASerializer).WriteUTF8String('UserId', l_UserId);
    l_UserName := UserName;
    TROSerializer(ASerializer).WriteUTF8String('UserName', l_UserName);
    l_WorkClass := WorkClass;
    TROSerializer(ASerializer).WriteUTF8String('WorkClass', l_WorkClass);
  end;
end;

{ TLoginInfoCollection }
constructor TLoginInfoCollection.Create;
begin
  inherited Create(TLoginInfo);
end;

constructor TLoginInfoCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TLoginInfoCollection.Add: TLoginInfo;
begin
  result := TLoginInfo(inherited Add);
end;

function TLoginInfoCollection.GetItems(aIndex: integer): TLoginInfo;
begin
  result := TLoginInfo(inherited Items[aIndex]);
end;

procedure TLoginInfoCollection.SetItems(aIndex: integer; const Value: TLoginInfo);
begin
  TLoginInfo(inherited Items[aIndex]).Assign(Value);
end;

{ TMsgInfo }

procedure TMsgInfo.Assign(iSource: TPersistent); 
var lSource: CsHorse2Library_Intf.TMsgInfo;
begin
  inherited Assign(iSource);
  if (iSource is CsHorse2Library_Intf.TMsgInfo) then begin
    lSource := CsHorse2Library_Intf.TMsgInfo(iSource);
    CompCode := lSource.CompCode;
    CompName := lSource.CompName;
    MsgPriority := lSource.MsgPriority;
    MsgId := lSource.MsgId;
    MsgSubject := lSource.MsgSubject;
    MsgTime := lSource.MsgTime;
    MsgReply := lSource.MsgReply;
    MsgSenderId := lSource.MsgSenderId;
    MsgSenderName := lSource.MsgSenderName;
    MsgSenderWorkClass := lSource.MsgSenderWorkClass;
    MsgSenderWorkName := lSource.MsgSenderWorkName;
    IsRead := lSource.IsRead;
  end;
end;

procedure TMsgInfo.ReadComplex(ASerializer: TObject);
var
  l_CompCode: String;
  l_CompName: String;
  l_IsRead: Boolean;
  l_MsgId: String;
  l_MsgPriority: String;
  l_MsgReply: String;
  l_MsgSenderId: String;
  l_MsgSenderName: String;
  l_MsgSenderWorkClass: String;
  l_MsgSenderWorkName: String;
  l_MsgSubject: String;
  l_MsgTime: String;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_CompCode := CompCode;
    TROSerializer(ASerializer).ReadUTF8String('CompCode', l_CompCode);
    CompCode := l_CompCode;
    l_CompName := CompName;
    TROSerializer(ASerializer).ReadUTF8String('CompName', l_CompName);
    CompName := l_CompName;
    l_MsgPriority := MsgPriority;
    TROSerializer(ASerializer).ReadUTF8String('MsgPriority', l_MsgPriority);
    MsgPriority := l_MsgPriority;
    l_MsgId := MsgId;
    TROSerializer(ASerializer).ReadUTF8String('MsgId', l_MsgId);
    MsgId := l_MsgId;
    l_MsgSubject := MsgSubject;
    TROSerializer(ASerializer).ReadUTF8String('MsgSubject', l_MsgSubject);
    MsgSubject := l_MsgSubject;
    l_MsgTime := MsgTime;
    TROSerializer(ASerializer).ReadUTF8String('MsgTime', l_MsgTime);
    MsgTime := l_MsgTime;
    l_MsgReply := MsgReply;
    TROSerializer(ASerializer).ReadUTF8String('MsgReply', l_MsgReply);
    MsgReply := l_MsgReply;
    l_MsgSenderId := MsgSenderId;
    TROSerializer(ASerializer).ReadUTF8String('MsgSenderId', l_MsgSenderId);
    MsgSenderId := l_MsgSenderId;
    l_MsgSenderName := MsgSenderName;
    TROSerializer(ASerializer).ReadUTF8String('MsgSenderName', l_MsgSenderName);
    MsgSenderName := l_MsgSenderName;
    l_MsgSenderWorkClass := MsgSenderWorkClass;
    TROSerializer(ASerializer).ReadUTF8String('MsgSenderWorkClass', l_MsgSenderWorkClass);
    MsgSenderWorkClass := l_MsgSenderWorkClass;
    l_MsgSenderWorkName := MsgSenderWorkName;
    TROSerializer(ASerializer).ReadUTF8String('MsgSenderWorkName', l_MsgSenderWorkName);
    MsgSenderWorkName := l_MsgSenderWorkName;
    l_IsRead := IsRead;
    TROSerializer(ASerializer).ReadEnumerated('IsRead',TypeInfo(boolean), l_IsRead);
    IsRead := l_IsRead;
  end
  else begin
    l_CompCode := CompCode;
    TROSerializer(ASerializer).ReadUTF8String('CompCode', l_CompCode);
    CompCode := l_CompCode;
    l_CompName := CompName;
    TROSerializer(ASerializer).ReadUTF8String('CompName', l_CompName);
    CompName := l_CompName;
    l_IsRead := IsRead;
    TROSerializer(ASerializer).ReadEnumerated('IsRead',TypeInfo(boolean), l_IsRead);
    IsRead := l_IsRead;
    l_MsgId := MsgId;
    TROSerializer(ASerializer).ReadUTF8String('MsgId', l_MsgId);
    MsgId := l_MsgId;
    l_MsgPriority := MsgPriority;
    TROSerializer(ASerializer).ReadUTF8String('MsgPriority', l_MsgPriority);
    MsgPriority := l_MsgPriority;
    l_MsgReply := MsgReply;
    TROSerializer(ASerializer).ReadUTF8String('MsgReply', l_MsgReply);
    MsgReply := l_MsgReply;
    l_MsgSenderId := MsgSenderId;
    TROSerializer(ASerializer).ReadUTF8String('MsgSenderId', l_MsgSenderId);
    MsgSenderId := l_MsgSenderId;
    l_MsgSenderName := MsgSenderName;
    TROSerializer(ASerializer).ReadUTF8String('MsgSenderName', l_MsgSenderName);
    MsgSenderName := l_MsgSenderName;
    l_MsgSenderWorkClass := MsgSenderWorkClass;
    TROSerializer(ASerializer).ReadUTF8String('MsgSenderWorkClass', l_MsgSenderWorkClass);
    MsgSenderWorkClass := l_MsgSenderWorkClass;
    l_MsgSenderWorkName := MsgSenderWorkName;
    TROSerializer(ASerializer).ReadUTF8String('MsgSenderWorkName', l_MsgSenderWorkName);
    MsgSenderWorkName := l_MsgSenderWorkName;
    l_MsgSubject := MsgSubject;
    TROSerializer(ASerializer).ReadUTF8String('MsgSubject', l_MsgSubject);
    MsgSubject := l_MsgSubject;
    l_MsgTime := MsgTime;
    TROSerializer(ASerializer).ReadUTF8String('MsgTime', l_MsgTime);
    MsgTime := l_MsgTime;
  end;
end;

procedure TMsgInfo.WriteComplex(ASerializer: TObject);
var
  l_CompCode: String;
  l_CompName: String;
  l_IsRead: Boolean;
  l_MsgId: String;
  l_MsgPriority: String;
  l_MsgReply: String;
  l_MsgSenderId: String;
  l_MsgSenderName: String;
  l_MsgSenderWorkClass: String;
  l_MsgSenderWorkName: String;
  l_MsgSubject: String;
  l_MsgTime: String;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TMsgInfo);
    l_CompCode := CompCode;
    TROSerializer(ASerializer).WriteUTF8String('CompCode', l_CompCode);
    l_CompName := CompName;
    TROSerializer(ASerializer).WriteUTF8String('CompName', l_CompName);
    l_MsgPriority := MsgPriority;
    TROSerializer(ASerializer).WriteUTF8String('MsgPriority', l_MsgPriority);
    l_MsgId := MsgId;
    TROSerializer(ASerializer).WriteUTF8String('MsgId', l_MsgId);
    l_MsgSubject := MsgSubject;
    TROSerializer(ASerializer).WriteUTF8String('MsgSubject', l_MsgSubject);
    l_MsgTime := MsgTime;
    TROSerializer(ASerializer).WriteUTF8String('MsgTime', l_MsgTime);
    l_MsgReply := MsgReply;
    TROSerializer(ASerializer).WriteUTF8String('MsgReply', l_MsgReply);
    l_MsgSenderId := MsgSenderId;
    TROSerializer(ASerializer).WriteUTF8String('MsgSenderId', l_MsgSenderId);
    l_MsgSenderName := MsgSenderName;
    TROSerializer(ASerializer).WriteUTF8String('MsgSenderName', l_MsgSenderName);
    l_MsgSenderWorkClass := MsgSenderWorkClass;
    TROSerializer(ASerializer).WriteUTF8String('MsgSenderWorkClass', l_MsgSenderWorkClass);
    l_MsgSenderWorkName := MsgSenderWorkName;
    TROSerializer(ASerializer).WriteUTF8String('MsgSenderWorkName', l_MsgSenderWorkName);
    l_IsRead := IsRead;
    TROSerializer(ASerializer).WriteEnumerated('IsRead',TypeInfo(boolean), l_IsRead);
  end
  else begin
    l_CompCode := CompCode;
    TROSerializer(ASerializer).WriteUTF8String('CompCode', l_CompCode);
    l_CompName := CompName;
    TROSerializer(ASerializer).WriteUTF8String('CompName', l_CompName);
    l_IsRead := IsRead;
    TROSerializer(ASerializer).WriteEnumerated('IsRead',TypeInfo(boolean), l_IsRead);
    l_MsgId := MsgId;
    TROSerializer(ASerializer).WriteUTF8String('MsgId', l_MsgId);
    l_MsgPriority := MsgPriority;
    TROSerializer(ASerializer).WriteUTF8String('MsgPriority', l_MsgPriority);
    l_MsgReply := MsgReply;
    TROSerializer(ASerializer).WriteUTF8String('MsgReply', l_MsgReply);
    l_MsgSenderId := MsgSenderId;
    TROSerializer(ASerializer).WriteUTF8String('MsgSenderId', l_MsgSenderId);
    l_MsgSenderName := MsgSenderName;
    TROSerializer(ASerializer).WriteUTF8String('MsgSenderName', l_MsgSenderName);
    l_MsgSenderWorkClass := MsgSenderWorkClass;
    TROSerializer(ASerializer).WriteUTF8String('MsgSenderWorkClass', l_MsgSenderWorkClass);
    l_MsgSenderWorkName := MsgSenderWorkName;
    TROSerializer(ASerializer).WriteUTF8String('MsgSenderWorkName', l_MsgSenderWorkName);
    l_MsgSubject := MsgSubject;
    TROSerializer(ASerializer).WriteUTF8String('MsgSubject', l_MsgSubject);
    l_MsgTime := MsgTime;
    TROSerializer(ASerializer).WriteUTF8String('MsgTime', l_MsgTime);
  end;
end;

{ TMsgInfoCollection }
constructor TMsgInfoCollection.Create;
begin
  inherited Create(TMsgInfo);
end;

constructor TMsgInfoCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TMsgInfoCollection.Add: TMsgInfo;
begin
  result := TMsgInfo(inherited Add);
end;

function TMsgInfoCollection.GetItems(aIndex: integer): TMsgInfo;
begin
  result := TMsgInfo(inherited Items[aIndex]);
end;

procedure TMsgInfoCollection.SetItems(aIndex: integer; const Value: TMsgInfo);
begin
  TMsgInfo(inherited Items[aIndex]).Assign(Value);
end;

{ CoLoginService }

class function CoLoginService.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): ILoginService;
begin
  result := TLoginService_Proxy.Create(aMessage, aTransportChannel);
end;

{ TLoginService_Proxy }

function TLoginService_Proxy.__GetInterfaceName:string;
begin
  result := 'LoginService';
end;

function TLoginService_Proxy.Login(var AInfo: TLoginInfo; var AErrMsg: String): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'CsHorse2Library', __InterfaceName, 'Login');
    __Message.Write('AInfo', TypeInfo(CsHorse2Library_Intf.TLoginInfo), AInfo, []);
    __Message.Write('AErrMsg', TypeInfo(String), AErrMsg, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
    __Message.Read('AInfo', TypeInfo(CsHorse2Library_Intf.TLoginInfo), AInfo, []);
    __Message.Read('AErrMsg', TypeInfo(String), AErrMsg, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TLoginService_Proxy.Logout(const AInfo: TLoginInfo);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'CsHorse2Library', __InterfaceName, 'Logout');
    __Message.Write('AInfo', TypeInfo(CsHorse2Library_Intf.TLoginInfo), AInfo, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TLoginService_Proxy.GetClientParam: Binary;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'CsHorse2Library', __InterfaceName, 'GetClientParam');
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Binary), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TLoginService_Proxy.GetOraSysDate(const ACompCode: String): String;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'CsHorse2Library', __InterfaceName, 'GetOraSysDate');
    __Message.Write('ACompCode', TypeInfo(String), ACompCode, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(String), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

{ CoAnnService }

class function CoAnnService.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IAnnService;
begin
  result := TAnnService_Proxy.Create(aMessage, aTransportChannel);
end;

{ TAnnService_Proxy }

function TAnnService_Proxy.__GetInterfaceName:string;
begin
  result := 'AnnService';
end;

function TAnnService_Proxy.GetSO021(const AInfo: TLoginInfo): Binary;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'CsHorse2Library', __InterfaceName, 'GetSO021');
    __Message.Write('AInfo', TypeInfo(CsHorse2Library_Intf.TLoginInfo), AInfo, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Binary), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TAnnService_Proxy.GetSOListText(var AInfo: TLoginInfo): String;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'CsHorse2Library', __InterfaceName, 'GetSOListText');
    __Message.Write('AInfo', TypeInfo(CsHorse2Library_Intf.TLoginInfo), AInfo, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(String), result, []);
    __Message.Read('AInfo', TypeInfo(CsHorse2Library_Intf.TLoginInfo), AInfo, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TAnnService_Proxy.GetCD042(const AInfo: TLoginInfo): Binary;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'CsHorse2Library', __InterfaceName, 'GetCD042');
    __Message.Write('AInfo', TypeInfo(CsHorse2Library_Intf.TLoginInfo), AInfo, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Binary), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TAnnService_Proxy.GetSO022(const AInfo: TLoginInfo): Binary;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'CsHorse2Library', __InterfaceName, 'GetSO022');
    __Message.Write('AInfo', TypeInfo(CsHorse2Library_Intf.TLoginInfo), AInfo, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Binary), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TAnnService_Proxy.GetSO023(const AInfo: TLoginInfo): Binary;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'CsHorse2Library', __InterfaceName, 'GetSO023');
    __Message.Write('AInfo', TypeInfo(CsHorse2Library_Intf.TLoginInfo), AInfo, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Binary), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

{ CoCallbackService }

class function CoCallbackService.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): ICallbackService;
begin
  result := TCallbackService_Proxy.Create(aMessage, aTransportChannel);
end;

{ TCallbackService_Proxy }

function TCallbackService_Proxy.__GetInterfaceName:string;
begin
  result := 'CallbackService';
end;

function TCallbackService_Proxy.GetGroupList(const AInfo: TLoginInfo): Binary;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'CsHorse2Library', __InterfaceName, 'GetGroupList');
    __Message.Write('AInfo', TypeInfo(CsHorse2Library_Intf.TLoginInfo), AInfo, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Binary), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TCallbackService_Proxy.GetUserList(const AInfo: TLoginInfo): Binary;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'CsHorse2Library', __InterfaceName, 'GetUserList');
    __Message.Write('AInfo', TypeInfo(CsHorse2Library_Intf.TLoginInfo), AInfo, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Binary), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TCallbackService_Proxy.SendMsg(const AInfo: TLoginInfo; const ARecver: Binary; const AMsg: Binary; const AMsgInfo: TMsgInfo; var AErrMsg: String): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'CsHorse2Library', __InterfaceName, 'SendMsg');
    __Message.Write('AInfo', TypeInfo(CsHorse2Library_Intf.TLoginInfo), AInfo, []);
    __Message.Write('ARecver', TypeInfo(Binary), ARecver, []);
    __Message.Write('AMsg', TypeInfo(Binary), AMsg, []);
    __Message.Write('AMsgInfo', TypeInfo(CsHorse2Library_Intf.TMsgInfo), AMsgInfo, []);
    __Message.Write('AErrMsg', TypeInfo(String), AErrMsg, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
    __Message.Read('AErrMsg', TypeInfo(String), AErrMsg, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TCallbackService_Proxy.GetMsgList(const AInfo: TLoginInfo): Binary;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'CsHorse2Library', __InterfaceName, 'GetMsgList');
    __Message.Write('AInfo', TypeInfo(CsHorse2Library_Intf.TLoginInfo), AInfo, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Binary), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TCallbackService_Proxy.GetMsg(const AInfo: TLoginInfo; const AMsgInfo: TMsgInfo): Binary;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'CsHorse2Library', __InterfaceName, 'GetMsg');
    __Message.Write('AInfo', TypeInfo(CsHorse2Library_Intf.TLoginInfo), AInfo, []);
    __Message.Write('AMsgInfo', TypeInfo(CsHorse2Library_Intf.TMsgInfo), AMsgInfo, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Binary), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TCallbackService_Proxy.GetOraSysDate(const ACompCode: String): String;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'CsHorse2Library', __InterfaceName, 'GetOraSysDate');
    __Message.Write('ACompCode', TypeInfo(String), ACompCode, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(String), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TCallbackService_Proxy.SetMsgRead(const AInfo: TLoginInfo; const AMsgInfo: TMsgInfo);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'CsHorse2Library', __InterfaceName, 'SetMsgRead');
    __Message.Write('AInfo', TypeInfo(CsHorse2Library_Intf.TLoginInfo), AInfo, []);
    __Message.Write('AMsgInfo', TypeInfo(CsHorse2Library_Intf.TMsgInfo), AMsgInfo, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

type
  { TSrvCallbackEvent_Writer }
  TSrvCallbackEvent_Writer = class(TROEventWriter, ISrvCallbackEvent_Writer)
  protected
    procedure UsersChange(const __Sender : TGUID; const AInfo: TLoginInfo);
    procedure ShutdownServer(const __Sender : TGUID; const AMessage: String);
    procedure MsgChange(const __Sender : TGUID; const AMsgInfo: TMsgInfo);
  end;

procedure TSrvCallbackEvent_Writer.UsersChange(const __Sender : TGUID; const AInfo: TLoginInfo);
var __eventdata : Binary;
begin
  __eventdata := Binary.Create;
  try
    __Message.InitializeEventMessage(NIL, 'CsHorse2Library', EID_SrvCallbackEvent, 'UsersChange');
    __Message.Write('AInfo', TypeInfo(TLoginInfo), AInfo, []);
    __Message.Finalize;

    __Message.WriteToStream(__eventdata);

    Repository.StoreEventData(__Sender, __eventdata, ExcludeSender, ExcludeSessionList, SessionList.CommaText);
  finally
    __eventdata.Free;
  end;
end;

procedure TSrvCallbackEvent_Writer.ShutdownServer(const __Sender : TGUID; const AMessage: String);
var __eventdata : Binary;
begin
  __eventdata := Binary.Create;
  try
    __Message.InitializeEventMessage(NIL, 'CsHorse2Library', EID_SrvCallbackEvent, 'ShutdownServer');
    __Message.Write('AMessage', TypeInfo(String), AMessage, []);
    __Message.Finalize;

    __Message.WriteToStream(__eventdata);

    Repository.StoreEventData(__Sender, __eventdata, ExcludeSender, ExcludeSessionList, SessionList.CommaText);
  finally
    __eventdata.Free;
  end;
end;

procedure TSrvCallbackEvent_Writer.MsgChange(const __Sender : TGUID; const AMsgInfo: TMsgInfo);
var __eventdata : Binary;
begin
  __eventdata := Binary.Create;
  try
    __Message.InitializeEventMessage(NIL, 'CsHorse2Library', EID_SrvCallbackEvent, 'MsgChange');
    __Message.Write('AMsgInfo', TypeInfo(TMsgInfo), AMsgInfo, []);
    __Message.Finalize;

    __Message.WriteToStream(__eventdata);

    Repository.StoreEventData(__Sender, __eventdata, ExcludeSender, ExcludeSessionList, SessionList.CommaText);
  finally
    __eventdata.Free;
  end;
end;

type
  { TSrvCallbackEvent_Invoker }
  TSrvCallbackEvent_Invoker = class(TROEventInvoker)
  published
    procedure Invoke_UsersChange(__EventReceiver : TROEventReceiver; const __Message : IROMessage; const __Target : IUnknown);
    procedure Invoke_ShutdownServer(__EventReceiver : TROEventReceiver; const __Message : IROMessage; const __Target : IUnknown);
    procedure Invoke_MsgChange(__EventReceiver : TROEventReceiver; const __Message : IROMessage; const __Target : IUnknown);
  end;

procedure TSrvCallbackEvent_Invoker.Invoke_UsersChange(__EventReceiver : TROEventReceiver; const __Message : IROMessage; const __Target : IUnknown);
var
__lObjectDisposer: TROObjectDisposer;
  AInfo: TLoginInfo;
begin
  AInfo := NIL;

  try
    __Message.Read('AInfo', TypeInfo(TLoginInfo), AInfo, []);

    (__Target as ISrvCallbackEvent).UsersChange(AInfo);

  finally
    __lObjectDisposer:= TROObjectDisposer.Create(__EventReceiver);
    try
      __lObjectDisposer.Add(AInfo);
    finally
      __lObjectDisposer.Free();
    end
  end
end;

procedure TSrvCallbackEvent_Invoker.Invoke_ShutdownServer(__EventReceiver : TROEventReceiver; const __Message : IROMessage; const __Target : IUnknown);
var
__lObjectDisposer: TROObjectDisposer;
  AMessage: String;
begin

  try
    __Message.Read('AMessage', TypeInfo(String), AMessage, []);

    (__Target as ISrvCallbackEvent).ShutdownServer(AMessage);

  finally
    __lObjectDisposer:= TROObjectDisposer.Create(__EventReceiver);
    try
    finally
      __lObjectDisposer.Free();
    end
  end
end;

procedure TSrvCallbackEvent_Invoker.Invoke_MsgChange(__EventReceiver : TROEventReceiver; const __Message : IROMessage; const __Target : IUnknown);
var
__lObjectDisposer: TROObjectDisposer;
  AMsgInfo: TMsgInfo;
begin
  AMsgInfo := NIL;

  try
    __Message.Read('AMsgInfo', TypeInfo(TMsgInfo), AMsgInfo, []);

    (__Target as ISrvCallbackEvent).MsgChange(AMsgInfo);

  finally
    __lObjectDisposer:= TROObjectDisposer.Create(__EventReceiver);
    try
      __lObjectDisposer.Add(AMsgInfo);
    finally
      __lObjectDisposer.Free();
    end
  end
end;

initialization
  RegisterROClass(TLoginInfo);
  RegisterROClass(TMsgInfo);
  RegisterProxyClass(ILoginService_IID, TLoginService_Proxy);
  RegisterProxyClass(IAnnService_IID, TAnnService_Proxy);
  RegisterProxyClass(ICallbackService_IID, TCallbackService_Proxy);

  RegisterEventWriterClass(ISrvCallbackEvent_Writer, TSrvCallbackEvent_Writer);
  RegisterEventInvokerClass(EID_SrvCallbackEvent, TSrvCallbackEvent_Invoker);

finalization
  UnregisterROClass(TLoginInfo);
  UnregisterROClass(TMsgInfo);
  UnregisterProxyClass(ILoginService_IID);
  UnregisterProxyClass(IAnnService_IID);
  UnregisterProxyClass(ICallbackService_IID);

  UnregisterEventWriterClass(ISrvCallbackEvent_Writer);
  UnregisterEventInvokerClass(EID_SrvCallbackEvent);
end.
